from pydantic import BaseModel
import pandas as pd
import numpy as np

class CreditCard(BaseModel):
    ID: int
    LIMIT_BAL: int
    SEX: int
    EDUCATION: int
    MARRIAGE: int
    AGE: int
    PAY_0: int
    PAY_2: int
    PAY_3: int
    PAY_4: int
    PAY_5: int
    PAY_6: int
    BILL_AMT1: int
    BILL_AMT2: int
    BILL_AMT3: int
    BILL_AMT4: int
    BILL_AMT5: int
    BILL_AMT6: int
    PAY_AMT1: int
    PAY_AMT2: int
    PAY_AMT3: int
    PAY_AMT4: int
    PAY_AMT5: int
    PAY_AMT6: int

def transform(data):
    data = pd.DataFrame([data])
    data = data.drop('ID', axis = 1)
    dataset = data.astype({
        'LIMIT_BAL': 'float64',
        'SEX': 'category',
        'EDUCATION': 'category',
        'MARRIAGE': 'category',
        'AGE': 'float32',
        'PAY_0': 'category',
        'PAY_2': 'category',
        'PAY_3': 'category',
        'PAY_4': 'category',
        'PAY_5': 'category',
        'PAY_6': 'category',
        'BILL_AMT1': 'float64',
        'BILL_AMT2': 'float64',
        'BILL_AMT3': 'float64',
        'BILL_AMT4': 'float64',
        'BILL_AMT5': 'float64',
        'BILL_AMT6': 'float64',
        'PAY_AMT1': 'float64',
        'PAY_AMT2': 'float64',
        'PAY_AMT3': 'float64',
        'PAY_AMT4': 'float64',
        'PAY_AMT5': 'float64',
        'PAY_AMT6': 'float64'
    }, copy = False)
    dataset['MARRIAGE'] = np.where(dataset['MARRIAGE'] == 0, 3, dataset['MARRIAGE'])
    dataset['EDUCATION'] = np.where(dataset['EDUCATION'] == 5, 4, dataset['EDUCATION'])
    dataset['EDUCATION'] = np.where(dataset['EDUCATION'] == 6, 4, dataset['EDUCATION'])
    dataset['EDUCATION'] = np.where(dataset['EDUCATION'] == 0, 4, dataset['EDUCATION'])
    PAY_range = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]
    EDU_range = [1, 2, 3, 4]
    MAR_range = [1, 2, 3]
    SEX_range = [1, 2]
    df = onehot_encode(
        dataset,
        {
            'EDUCATION': ['EDU', EDU_range],
            'MARRIAGE': ['MAR', MAR_range],
            'SEX': ['SX', SEX_range],
            'PAY_0': ['PAY0', PAY_range],
            'PAY_2': ['PAY2', PAY_range],
            'PAY_3': ['PAY3', PAY_range],
            'PAY_4': ['PAY4', PAY_range],
            'PAY_5': ['PAY5', PAY_range],
            'PAY_6': ['PAY6', PAY_range]
        }
    )
    df.drop(['PAY6_1', 'PAY5_1'], axis = 1, inplace = True)
    df = scaleData(df)
    return df
    
def onehot_encode(df, column_dict):
    df = df.copy()
    for column, prefix_range in column_dict.items():
        for i in prefix_range[1]:
            df[prefix_range[0] + "_" + str(i)] = int(df[column] == i)
        df.drop(column, axis = 1, inplace = True)
    return df

def scaleData(df):
    scaler = {
        'LIMIT_BAL': {'mean': 116761.22981868834, 'std': 124209.63883852166},
        'AGE': {'mean': 35.00590515136719, 'std': 9.028944969177246},
        'BILL_AMT1': {'mean': 37762.345094280194, 'std': 61699.4406345038},
        'BILL_AMT2': {'mean': 36804.2703435053, 'std': 59391.94800841414},
        'BILL_AMT3': {'mean': 35631.03060288005, 'std': 57624.104373216964},
        'BILL_AMT4': {'mean': 33538.7320302008, 'std': 53171.06472096181},
        'BILL_AMT5': {'mean': 31845.635292631127, 'std': 50021.157691827066},
        'BILL_AMT6': {'mean': 31105.012776490526, 'std': 48844.353862225216},
        'PAY_AMT1': {'mean': 4196.547022724622, 'std': 13433.020784738013},
        'PAY_AMT2': {'mean': 4222.211721911452, 'std': 18607.12099643275},
        'PAY_AMT3': {'mean': 3829.5152338919884, 'std': 14243.075472059018},
        'PAY_AMT4': {'mean': 3447.21452041072, 'std': 12695.375621535548},
        'PAY_AMT5': {'mean': 3409.3484241075303, 'std': 12388.712057339997},
        'PAY_AMT6': {'mean': 3608.020394453112, 'std': 14411.49551078102},
        'EDU_1': {'mean': 0.3026236945728471, 'std': 0.4593986401351624},
        'EDU_2': {'mean': 0.5551275466529704, 'std': 0.4969569788095007},
        'EDU_3': {'mean': 0.13223335045368945, 'std': 0.3387479109687757},
        'EDU_4': {'mean': 0.010015408320493066, 'std': 0.09957566022256438},
        'MAR_1': {'mean': 0.5061419277520972, 'std': 0.4999676250938208},
        'MAR_2': {'mean': 0.4857473035439137, 'std': 0.4998021673844007},
        'MAR_3': {'mean': 0.008110768703989043, 'std': 0.08969479530577845},
        'SX_1': {'mean': 0.3466444102037322, 'std': 0.4759064088651557},
        'SX_2': {'mean': 0.4734848484848485, 'std': 0.4993017944289139},
        'PAY0_-2': {'mean': 0.05904382811162472, 'std': 0.23570923498567153},
        'PAY0_-1': {'mean': 0.12170433145009416, 'std': 0.3269475106955264},
        'PAY0_0': {'mean': 0.3620313302516692, 'std': 0.4805929556494689},
        'PAY0_1': {'mean': 0.09444016435541859, 'std': 0.2924432422595498},
        'PAY0_2': {'mean': 0.10056069166238658, 'std': 0.30074935515935536},
        'PAY0_3': {'mean': 0.0075543571306283175, 'std': 0.08658781246643725},
        'PAY0_4': {'mean': 0.0016692347200821776, 'std': 0.04082259226251667},
        'PAY0_5': {'mean': 0.0005564115733607259, 'std': 0.02358206692820508},
        'PAY0_6': {'mean': 0.00023540489642184556, 'std': 0.015341268449773862},
        'PAY0_7': {'mean': 0.0001926040061633282, 'std': 0.013876996467749052},
        'PAY0_8': {'mean': 0.0004066084574559151, 'std': 0.02016065041778724},
        'PAY2_-2': {'mean': 0.08093648347885636, 'std': 0.2727404646244695},
        'PAY2_-1': {'mean': 0.12947269303201506, 'std': 0.3357259699166259},
        'PAY2_0': {'mean': 0.4079566854990584, 'std': 0.491460270188358},
        'PAY2_1': {'mean': 0.0005992124636192433, 'std': 0.02447174337979324},
        'PAY2_2': {'mean': 0.15380499914398219, 'std': 0.3607655841247878},
        'PAY2_3': {'mean': 0.009608799863037152, 'std': 0.09755344427184244},
        'PAY2_4': {'mean': 0.0021614449580551276, 'std': 0.04644156834820376},
        'PAY2_5': {'mean': 0.0005350111282314672, 'std': 0.023124366692295152},
        'PAY2_6': {'mean': 0.00025680534155110427, 'std': 0.01602326081116207},
        'PAY2_7': {'mean': 0.00042800890258517377, 'std': 0.020684169473804675},
        'PAY2_8': {'mean': 2.1400445129258687e-05, 'std': 0.004626061513778076},
        'PAY3_-2': {'mean': 0.08742081835302175, 'std': 0.28245375940447826},
        'PAY3_-1': {'mean': 0.1270758431775381, 'std': 0.3330614766203145},
        'PAY3_0': {'mean': 0.4099255264509502, 'std': 0.49182493410391764},
        'PAY3_1': {'mean': 8.560178051703475e-05, 'std': 0.009251826017106028},
        'PAY3_2': {'mean': 0.1794427324088341, 'std': 0.38372671177347156},
        'PAY3_3': {'mean': 0.005200308166409861, 'std': 0.07192618211699045},
        'PAY3_4': {'mean': 0.0016264338298236604, 'std': 0.040296690848780056},
        'PAY3_5': {'mean': 0.00044940934771443245, 'std': 0.021194739734099504},
        'PAY3_6': {'mean': 0.0004922102379729498, 'std': 0.022180588261211297},
        'PAY3_7': {'mean': 0.0005778120184899846, 'std': 0.0240310322357416},
        'PAY3_8': {'mean': 6.420133538777607e-05, 'std': 0.008012402102656774},
        'PAY4_-2': {'mean': 0.09304913542201677, 'std': 0.29050438871506695},
        'PAY4_-1': {'mean': 0.12170433145009416, 'std': 0.3269475106955264},
        'PAY4_0': {'mean': 0.4550376647834275, 'std': 0.49797961341137087},
        'PAY4_1': {'mean': 4.2800890258517374e-05, 'std': 0.006542168927871825},
        'PAY4_2': {'mean': 0.136085430576956, 'std': 0.3428829278109374},
        'PAY4_3': {'mean': 0.004001883239171375, 'std': 0.06313440797924658},
        'PAY4_4': {'mean': 0.0014766307139188494, 'std': 0.038398982150846944},
        'PAY4_5': {'mean': 0.0007490155795240541, 'std': 0.027358190232343732},
        'PAY4_6': {'mean': 0.00010700222564629344, 'std': 0.010343745253496699},
        'PAY4_7': {'mean': 0.001241225817497004, 'std': 0.03520953999059531},
        'PAY4_8': {'mean': 4.2800890258517374e-05, 'std': 0.006542168927871824},
        'PAY5_-2': {'mean': 0.09728642355761, 'std': 0.2963505606782029},
        'PAY5_-1': {'mean': 0.11853706557096387, 'std': 0.32324644739298647},
        'PAY5_0': {'mean': 0.4801189864749187, 'std': 0.4996099349174189},
        'PAY5_2': {'mean': 0.10931347372025338, 'std': 0.3120354496877129},
        'PAY5_3': {'mean': 0.003959082348912857, 'std': 0.06279723248965903},
        'PAY5_4': {'mean': 0.0017976373908577298, 'std': 0.04236088163123309},
        'PAY5_5': {'mean': 0.00036380756719739773, 'std': 0.019070474410182094},
        'PAY5_6': {'mean': 8.560178051703475e-05, 'std': 0.009251826017106028},
        'PAY5_7': {'mean': 0.001241225817497004, 'std': 0.03520953999059531},
        'PAY5_8': {'mean': 2.1400445129258687e-05, 'std': 0.004626061513778076},
        'PAY6_-2': {'mean': 0.10475517890772128, 'std': 0.30624098094344},
        'PAY6_-1': {'mean': 0.12283855504194487, 'std': 0.3282553127799963},
        'PAY6_0': {'mean': 0.4203047423386406, 'std': 0.49361308755723193},
        'PAY6_2': {'mean': 0.13591422701592193, 'std': 0.3427011281945509},
        'PAY6_3': {'mean': 0.00539291217257319, 'std': 0.07323894770987516},
        'PAY6_4': {'mean': 0.0010486218113336758, 'std': 0.03236579400465351},
        'PAY6_5': {'mean': 0.00027820578668036295, 'std': 0.016677360115417286},
        'PAY6_6': {'mean': 0.0004066084574559151, 'std': 0.02016065041778724},
        'PAY6_7': {'mean': 0.0009844204759458996, 'std': 0.03136036414043059},
        'PAY6_8': {'mean': 4.2800890258517374e-05, 'std': 0.006542168927871825}
    }
    for column in df.columns:
        df[column] = (df[column] - scaler[column]['mean']) / scaler[column]['std']
    return df
